/**
 * License: MIT
 * Generated on 2019/06/13 18:20
 * Author: Przemysław Tyczyński | https://tyczynski.dev
 * Copyright (c) 2019 Przemysław Tyczyński
 */

!(function(e, t) {
	'object' == typeof exports && 'undefined' != typeof module
		? (module.exports = t())
		: 'function' == typeof define && define.amd
		? define(t)
		: (e.ScrollReveal = t());
})(this, function() {
	'use strict';
	const e = { root: null, rootMargin: '0px', threshold: 1, visibleClass: 'in-visible' };
	return class {
		constructor(t = '.js-scroll-observer', s = {}) {
			if (t instanceof Element) this.elements = [t];
			else if (t instanceof NodeList) this.elements = Array.from(t);
			else if (t instanceof String) this.elements = Array.from(document.querySelectorAll(t));
			else {
				if (!(t instanceof Array))
					throw new Error(
						"The argument 'elements' passed is not an instance of Element, NodeList, String or Array",
					);
				this.elements = t;
			}
			(this.config = Object.assign({}, e, s)),
				window.addEventListener('scroll', this.prepareElements.bind(this));
		}
		prepareElements() {
			(this.elements = this.elements.filter(e => {
				const [t, s] = (function(e) {
					const { top: t, height: s } = e.getBoundingClientRect();
					return [t <= window.innerHeight && t + s >= 0, s + t <= 0 ? 'up' : 'down'];
				})(e);
				return t || (e.classList.add(s), e.classList.add(this.config.preparedClass)), !t;
			})),
				window.removeEventListener('scroll', this.prepareElements.bind(this)),
				this.initObserver();
		}
		initObserver() {
			this.observer = new IntersectionObserver(this.callback.bind(this), {
				root: this.config.root,
				rootMargin: this.config.rootMargin,
				threshold: this.config.threshold,
			});
			for (let e = 0; e < this.elements.length; e += 1) this.observer.observe(this.elements[e]);
		}
		callback(e) {
			e.forEach(e => {
				const { target: t } = e;
				e.isIntersecting && (t.classList.add(this.config.visibleClass), this.observer.unobserve(t));
			});
		}
		observe(e) {
			this.observer.observe(e);
		}
	};
});
