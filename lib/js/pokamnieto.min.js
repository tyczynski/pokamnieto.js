/**
 * @package pokamnieto - A lightweight for revealing elements when they appear in the view while scrolling the page based on the IntersectionObserver API.
 * @version v0.1.0
 * @link https://github.com/tyczynski/pokamnieto.js
 * @author Przemysław Tyczyński | https://tyczynski.pl
 * @license MIT
 */
!function(e,t){"object"==typeof exports&&"undefined"!=typeof module?module.exports=t():"function"==typeof define&&define.amd?define(t):e.Pokamnieto=t()}(this,function(){"use strict";const e={root:null,rootMargin:"0px",threshold:0,elementVisibleClassName:"is-visible",elementPreparedClassName:"is-prepared",unmountOnRevealAll:!1};return class{constructor(t=".js-pokamnieto",s={}){this.elements=[...document.querySelectorAll(t)],this.config=Object.assign({},e,s),this.state={observedElements:0},this.prepareElements=this.prepareElements.bind(this),window.addEventListener("scroll",this.prepareElements)}prepareElements(){const{elementPreparedClassName:e}=this.config;window.removeEventListener("scroll",this.prepareElements),this.elements=this.elements.filter(t=>{const[s,n]=function(e){const{top:t,height:s}=e.getBoundingClientRect();return[t<=window.innerHeight&&t+s>=0,s+t<=0?"up":"down"]}(t);return s||(t.classList.add(n),t.classList.add(e)),!s}),this.state.observedElements=this.elements.length,this.initObserver()}initObserver(){this.observer=new IntersectionObserver(this.callback.bind(this),{root:this.config.root,rootMargin:this.config.rootMargin,threshold:this.config.threshold});for(let e=0;e<this.elements.length;e+=1)this.observer.observe(this.elements[e])}callback(e){const{elementVisibleClassName:t}=this.config;e.forEach(e=>{const{target:s}=e;e.isIntersecting&&(s.classList.add(t),this.observer.unobserve(s),this.state.observedElements-=1,this.unmountIf())})}unmountIf(){const{observedElements:e}=this.state,{unmountOnRevealAll:t}=this.config;0===e&&t&&this.unmount()}unmount(){this.observer.disconnect()}observe(e){this.observer.observe(e),this.state.observedElements+=1}}});